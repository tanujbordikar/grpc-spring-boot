package com.dev;

import com.dev.BookAuthorServiceGrpc.BookAuthorServiceImplBase;

import io.grpc.stub.StreamObserver;
import net.devh.boot.grpc.server.service.GrpcService;

@GrpcService
public class BookAuthorServerService extends BookAuthorServiceImplBase {

	@Override
	public void getAuthor(Author request, StreamObserver<Author> responseObserver) {
		TempDB
			.getAuthorsFromTempDb()
			.stream()
			.filter(author -> author.getAuthorId()==request.getAuthorId())
			.findFirst()
			.ifPresent(responseObserver::onNext);
		responseObserver.onCompleted();
	}

	@Override
	public void getBooksByAuthor(Author request, StreamObserver<Book> responseObserver) {
		TempDB
			.getBooksFromTempDb()
			.stream()
			.filter(book -> book.getAuthorId()==request.getAuthorId())
			.forEach(responseObserver::onNext);
		responseObserver.onCompleted();
	}

	@Override
	public StreamObserver<Book> getExpensiveBook(StreamObserver<Book> responseObserver) {
		return new StreamObserver<Book>(){
			Book expensiveBook = null;
			float maxPrice = Float.MIN_VALUE;
			@Override
			public void onNext(Book book) {
				if(book.getPrice()>maxPrice) {
					expensiveBook = book;
					maxPrice = book.getPrice();
				}
			}
			@Override
			public void onError(Throwable t) {
				responseObserver.onError(t);
			}
			@Override
			public void onCompleted() {
				responseObserver.onNext(expensiveBook);
				responseObserver.onCompleted();
			}
		};
	}

}
